{"version":3,"sources":["components/AppHeader.tsx","components/NewRecipe.tsx","components/RecipeListItem.tsx","components/RecipesList.tsx","components/FieldLabel.tsx","components/RecipeForm.tsx","components/IngredientsListItem.tsx","components/IngredientsList.tsx","components/RecipeDetail.tsx","components/RecipeSection.tsx","components/IngredientForm.tsx","components/ShoppingListSection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","NewRecipe","handleOnClick","setSelectingRecipeID","props","onClick","this","StyledRecipeThumbnail","styled","imageURL","description","src","alt","RecipeListItem","handleSelectRecipe","recipeID","history","push","name","isActive","style","maxWidth","withRouter","RecipesList","recipesList","selectingRecipeID","map","recipe","key","children","htmlFor","RecipeSchema","yup","shape","required","ingredients","of","quantity","RecipeForm","initialValues","defaultInitialValues","previewImage","handleCancelForm","handleSubmitForm","values","actions","createNewRecipe","updateRecipe","resetForm","validateImageURL","a","loadImagePromise","Promise","resolve","reject","onload","onerror","Image","match","params","find","onSubmit","validationSchema","handleSubmit","errors","FieldLabel","placeholder","render","errorMsg","validate","as","rows","arrayHelpers","length","ingredient","index","msg","remove","IngredientsListItem","IngredientList","setSelectingIngredientID","selectingIngredientID","RecipeDetail","handleAddIngredients","addIngredients","deleteRecipe","item","aria-haspopup","aria-labelledby","SelectRecipe","RecipeSection","path","routeProps","location","component","IngredientSchema","IngredientForm","componentWillReceiveProps","ingredientsList","ingredientID","handleDeleteIngredient","deleteIngredient","updateIngredient","enableReinitialize","setFieldValue","errMsg","ShoppingListSection","state","setState","exact","createUniqueList","list","uuid","App","seed","uniqueRecipe","newRecipe","recipes","updatedRecipeIndex","findIndex","filter","newIngredient","updatedIngredientIndex","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80d29beb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\n\nexport default class extends Component {\n  render() {\n    return (\n      <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n        <Link to='/' className='navbar-brand'>\n          Recipe Bookeessss\n        </Link>\n        <button\n          className='navbar-toggler'\n          type='button'\n          data-toggle='collapse'\n          data-target='#navbarSupportedContent'\n          aria-controls='navbarSupportedContent'\n          aria-expanded='false'\n          aria-label='Toggle navigation'\n        >\n          <span className='navbar-toggler-icon'></span>\n        </button>\n\n        <div className='collapse navbar-collapse' id='navbarSupportedContent'>\n          <ul className='navbar-nav mr-auto'>\n            <li className='nav-item active'>\n              <NavLink to='/recipes' className='nav-link'>\n                Recipes\n              </NavLink>\n            </li>\n            <li className='nav-item'>\n              <NavLink to='/shopping-list' className='nav-link'>\n                Shopping List\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface NewRecipeProps {\n  setSelectingRecipeID: (recipeID: string) => void;\n}\nexport default class NewRecipe extends Component<NewRecipeProps> {\n  handleOnClick = () => {\n    const { setSelectingRecipeID } = this.props;\n\n    setSelectingRecipeID(\"\");\n  };\n\n  render() {\n    return (\n      <div className='py-4 px-2 border-bottom text-left'>\n        <Link to='/recipes/create-new-recipes' onClick={this.handleOnClick}>\n          <button className='btn btn-success'>New Recipe</button>\n        </Link>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\ninterface RecipeProps extends RouteComponentProps {\n  recipeID: string;\n  name: string;\n  description: string;\n  imageURL: string;\n  setSelectingRecipeID: (recipeID: string) => void;\n  isActive: boolean;\n}\n\nconst RecipeThumbnail = ({\n  imageURL,\n  description,\n  className,\n}: {\n  imageURL: string;\n  description: string;\n  className?: string;\n}) => (\n  <img\n    src={imageURL}\n    className={`align-self-center mr-3 img-thumbnail ${className}`}\n    alt={description}\n  />\n);\n\nconst StyledRecipeThumbnail = styled(RecipeThumbnail)`\n  max-width: 6rem;\n`;\n\nclass RecipeListItem extends Component<RecipeProps> {\n  handleSelectRecipe = (recipeID: string) => {\n    const { history, setSelectingRecipeID } = this.props;\n    setSelectingRecipeID(recipeID);\n    history.push(`/recipes/recipe-detail/${recipeID}`);\n  };\n\n  render() {\n    const { recipeID, name, description, imageURL, isActive } = this.props;\n\n    return (\n      <li\n        className={`list-group-item ${isActive ? \"active\" : \"\"}`}\n        onClick={() => this.handleSelectRecipe(recipeID)}\n      >\n        <div className='media'>\n          <div className='media-body text-left'>\n            <h5 className='mt-0'>{name}</h5>\n            <p\n              className='text-truncate d-inline-block'\n              style={{ maxWidth: \"15rem\" }}\n            >\n              {description}\n            </p>\n          </div>\n          <StyledRecipeThumbnail\n            imageURL={imageURL}\n            description={description}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default withRouter(RecipeListItem);\n","import React, { Component } from \"react\";\nimport RecipeListItem from \"./RecipeListItem\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\ninterface RecipesListProps extends RouteComponentProps {\n  recipesList: Recipe[];\n  setSelectingRecipeID: (recipeID: string) => void;\n  selectingRecipeID: string;\n}\n\nclass RecipesList extends Component<RecipesListProps> {\n  render() {\n    const { recipesList, setSelectingRecipeID, selectingRecipeID } = this.props;\n    return (\n      <ul className='list-group mt-4'>\n        {recipesList.map((recipe: Recipe) => (\n          <RecipeListItem\n            key={recipe.id}\n            recipeID={recipe.id}\n            name={recipe.name}\n            description={recipe.description}\n            imageURL={recipe.imageURL}\n            setSelectingRecipeID={setSelectingRecipeID}\n            isActive={selectingRecipeID === recipe.id}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default withRouter(RecipesList);\n","import React from \"react\";\n\nexport default ({\n  children,\n  htmlFor,\n}: {\n  children: string;\n  htmlFor: string;\n}) => (\n  <label htmlFor={htmlFor} className='font-weight-bold'>\n    {children}\n  </label>\n);\n","import React, { Component } from \"react\";\nimport { Formik, Field, FieldArray, ErrorMessage } from \"formik\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport FieldLabel from \"./FieldLabel\";\nimport * as yup from \"yup\";\n\ninterface RecipeFormProps extends RouteComponentProps {\n  recipesList?: Recipe[];\n  createNewRecipe?: (recipe: Recipe) => void;\n  updateRecipe?: (recipe: Recipe) => void;\n}\n\nconst RecipeSchema = yup.object().shape({\n  name: yup.string().required(),\n  imageURL: yup.string().required(),\n  description: yup.string().required(),\n  ingredients: yup.array().of(\n    yup.object().shape({\n      name: yup.string().required(),\n      quantity: yup.number().required(),\n    })\n  ),\n});\n\nexport default class RecipeForm extends Component<RecipeFormProps> {\n  public initialValues: Recipe;\n  private defaultInitialValues: Recipe;\n  private previewImage: HTMLImageElement;\n\n  constructor(props: RecipeFormProps) {\n    super(props);\n    this.defaultInitialValues = {\n      id: \"\",\n      name: \"\",\n      description: \"\",\n      imageURL: \"\",\n      ingredients: [],\n    };\n    this.previewImage = new Image();\n\n    const { match, recipesList } = this.props;\n\n    if (match.params && (match.params as any).recipeID && recipesList) {\n      const recipeID = (match.params as any).recipeID;\n      const recipe = recipesList.find(\n        (recipe: Recipe) => recipe.id === recipeID\n      );\n\n      this.initialValues = recipe ? recipe : this.defaultInitialValues;\n    } else {\n      this.initialValues = this.defaultInitialValues;\n    }\n  }\n\n  handleCancelForm = () => {\n    const { history } = this.props;\n\n    history.push(\"/recipes\");\n  };\n\n  handleSubmitForm = (values: Recipe, actions: any) => {\n    const { history, createNewRecipe, updateRecipe } = this.props;\n\n    createNewRecipe && createNewRecipe(values);\n    updateRecipe && updateRecipe(values);\n\n    actions.resetForm();\n    history.push(\"/recipes\");\n  };\n\n  validateImageURL = async (imageURL: string) => {\n    try {\n      const loadImagePromise = new Promise((resolve, reject) => {\n        this.previewImage.onload = resolve;\n        this.previewImage.onerror = reject;\n        this.previewImage.src = imageURL;\n      });\n\n      await loadImagePromise;\n    } catch (err) {\n      return \"Invalid image URL\";\n    }\n  };\n\n  render() {\n    return (\n      <Formik\n        initialValues={this.initialValues}\n        onSubmit={this.handleSubmitForm}\n        validationSchema={RecipeSchema}\n      >\n        {({ handleSubmit, values, errors }) => (\n          <form onSubmit={handleSubmit}>\n            <div className='form-group'>\n              <button type='submit' className='btn btn-success mr-3'>\n                Save\n              </button>\n              <button\n                className='btn btn-danger'\n                onClick={this.handleCancelForm}\n              >\n                Cancel\n              </button>\n            </div>\n            {/* Name */}\n            <div className='form-group'>\n              <FieldLabel htmlFor='recipeName'> Name</FieldLabel>\n              <Field\n                type='text'\n                name='name'\n                className='form-control'\n                placeholder='Name'\n                id='recipeName'\n              ></Field>\n\n              <ErrorMessage\n                name='name'\n                render={(errorMsg: string) => (\n                  <div className='text-danger'>{errorMsg}</div>\n                )}\n              />\n            </div>\n            {/* ImageURL */}\n            <div className='form-group'>\n              <FieldLabel htmlFor='recipeImageURL'> Image URL</FieldLabel>\n              <Field\n                type='text'\n                name='imageURL'\n                className='form-control'\n                placeholder='Image URL'\n                id='recipeImageURL'\n                validate={this.validateImageURL}\n              ></Field>\n              <ErrorMessage\n                name='imageURL'\n                render={(errorMsg: string) => (\n                  <div className='text-danger'>{errorMsg}</div>\n                )}\n              />\n              {/* Image Preview */}\n              {!errors.imageURL && values.imageURL ? (\n                <div className='mt-3'>\n                  <img\n                    src={values.imageURL}\n                    className='img-thumbnail'\n                    style={{ maxWidth: \"10rem\" }}\n                    alt={values.description}\n                  />\n                </div>\n              ) : null}\n            </div>\n            {/* Description */}\n            <div className='form-group'>\n              <FieldLabel htmlFor='recipeDescription'> Description</FieldLabel>\n              <Field\n                as='textarea'\n                rows={10}\n                name='description'\n                className='form-control'\n                placeholder='Description'\n                id='recipeDescription'\n              ></Field>\n              <ErrorMessage\n                name='description'\n                render={(errorMsg: string) => (\n                  <div className='text-danger'>{errorMsg}</div>\n                )}\n              />\n            </div>\n            {/* Ingredients */}\n            <FieldArray\n              name='ingredients'\n              render={(arrayHelpers) => (\n                <div className='mt-4'>\n                  {values.ingredients.length\n                    ? values.ingredients?.map((ingredient, index) => (\n                        <div className='row mb-2' key={index}>\n                          <div className='col-md-8'>\n                            <Field\n                              type='text'\n                              name={`ingredients[${index}].name`}\n                              className='form-control'\n                              placeholder='name'\n                            />\n                            <ErrorMessage\n                              name={`ingredients[${index}].name`}\n                              render={() => (\n                                <div className='text-danger'>\n                                  ingredient name is required\n                                </div>\n                              )}\n                            />\n                          </div>\n                          <div className='col-md-3'>\n                            <Field\n                              type='text'\n                              placeholder='quantity'\n                              name={`ingredients.${index}.quantity`}\n                              className='form-control'\n                            />\n                            <ErrorMessage\n                              name={`ingredients.${index}.quantity`}\n                              render={(msg) => (\n                                <div className='text-danger'>{msg}</div>\n                              )}\n                            />\n                          </div>\n                          <div className='col-md-1'>\n                            <button\n                              className='btn btn-danger'\n                              onClick={() => {\n                                arrayHelpers.remove(index);\n                              }}\n                            >\n                              X\n                            </button>\n                          </div>\n                        </div>\n                      ))\n                    : null}\n                  {/* Add Ingredient Button */}\n                  <div className='mt-4'>\n                    <button\n                      className='btn btn-success'\n                      onClick={() =>\n                        arrayHelpers.push({ name: \"\", quantity: \"\" })\n                      }\n                    >\n                      Add Ingredient\n                    </button>\n                  </div>\n                </div>\n              )}\n            />\n          </form>\n        )}\n      </Formik>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\ninterface IngredientsListItemProps {\n  id: string;\n  name: string;\n  quantity: number;\n  isActive?: boolean;\n  handleOnClick?: (ingredienID: string) => void;\n}\n\nexport default class IngredientsListItem extends Component<\n  IngredientsListItemProps\n> {\n  render() {\n    const { id, name, quantity, isActive, handleOnClick } = this.props;\n    return (\n      <li\n        className={`list-group-item ${isActive ? \"active\" : \"\"}`}\n        onClick={() => {\n          handleOnClick && handleOnClick(id);\n        }}\n      >\n        {handleOnClick ? `${name} (${quantity})` : `${name} - ${quantity}`}\n      </li>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport IngredientsListItem from \"./IngredientsListItem\";\n\ninterface IngredientListProps {\n  ingredients: Ingredient[];\n  setSelectingIngredientID?: (ingredientID: string) => void;\n  selectingIngredientID?: string;\n}\nexport default class IngredientList extends Component<IngredientListProps> {\n  render() {\n    const {\n      ingredients,\n      setSelectingIngredientID,\n      selectingIngredientID,\n    } = this.props;\n    return (\n      <ul className='list-group'>\n        {ingredients.map((ingredient) => (\n          <IngredientsListItem\n            id={ingredient.id}\n            name={ingredient.name}\n            quantity={ingredient.quantity}\n            isActive={selectingIngredientID === ingredient.id}\n            handleOnClick={setSelectingIngredientID}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\nimport IngredientList from \"./IngredientsList\";\n\ninterface RecipeDetailProps extends RouteComponentProps {\n  recipesList: Recipe[];\n  deleteRecipe: (recipeID: string) => void;\n  addIngredients: (...ingredients: Ingredient[]) => void;\n}\n\nexport default class RecipeDetail extends Component<RecipeDetailProps> {\n  handleAddIngredients = (ingredients: Ingredient[]) => {\n    const { addIngredients } = this.props;\n\n    addIngredients(...ingredients);\n  };\n  render() {\n    const { recipesList, deleteRecipe, match } = this.props;\n    const recipeID = (match.params as any).recipeID || \"\";\n    const recipe = recipesList.find((item: Recipe) => item.id === recipeID);\n\n    return (\n      <Fragment>\n        {recipe ? (\n          <div>\n            <div className='text-center'>\n              <img\n                src={recipe.imageURL}\n                alt={recipe.description}\n                className='img-thumbnail'\n                style={{ maxWidth: \"15rem\" }}\n              />\n            </div>\n            <h1>{recipe.name}</h1>\n            <p>{recipe.description}</p>\n            <div className='dropdown'>\n              <button\n                className='btn btn-primary dropdown-toggle'\n                type='button'\n                id='dropdownMenuButton'\n                data-toggle='dropdown'\n                aria-haspopup='true'\n                aria-expanded='false'\n              >\n                Manage Recipe\n              </button>\n              <div\n                className='dropdown-menu'\n                aria-labelledby='dropdownMenuButton'\n              >\n                <div\n                  className='dropdown-item'\n                  onClick={() => this.handleAddIngredients(recipe.ingredients)}\n                >\n                  To Shopping List\n                </div>\n                <Link\n                  className='dropdown-item'\n                  to={`/recipes/update-recipe/${recipe.id}`}\n                >\n                  Edit Recipe\n                </Link>\n                <div\n                  className='dropdown-item'\n                  onClick={() => {\n                    deleteRecipe(recipeID);\n                  }}\n                >\n                  Delete Recipe\n                </div>\n              </div>\n              <div className='mt-4'>\n                <IngredientList ingredients={recipe.ingredients} />\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport NewRecipe from \"./NewRecipe\";\nimport RecipesList from \"./RecipesList\";\nimport RecipeForm from \"./RecipeForm\";\nimport RecipeDetail from \"./RecipeDetail\";\nimport { Route, Switch } from \"react-router-dom\";\n\nconst SelectRecipe = () => (\n  <h1 className='text-center mt-4'>Please select a recipe!</h1>\n);\n\ninterface RecipeSectionProps {\n  recipesList: Recipe[];\n  createNewRecipe: (recipe: Recipe) => void;\n  updateRecipe: (recipe: Recipe) => void;\n  deleteRecipe: (recipe: string) => void;\n  setSelectingRecipeID: (recipeID: string) => void;\n  addIngredients: (...ingredients: Ingredient[]) => void;\n  selectingRecipeID: string;\n}\n\nclass RecipeSection extends Component<RecipeSectionProps> {\n  render() {\n    const {\n      recipesList,\n      createNewRecipe,\n      updateRecipe,\n      deleteRecipe,\n      setSelectingRecipeID,\n      selectingRecipeID,\n      addIngredients,\n    } = this.props;\n\n    return (\n      <main>\n        <div className='container'>\n          <div className='row'>\n            <div className='col-md-5'>\n              <NewRecipe setSelectingRecipeID={setSelectingRecipeID} />\n              <RecipesList\n                recipesList={recipesList}\n                setSelectingRecipeID={setSelectingRecipeID}\n                selectingRecipeID={selectingRecipeID}\n              />\n            </div>\n            <div className='col-md-7'>\n              <div className='p-4'>\n                <Switch>\n                  <Route\n                    path='/recipes/recipe-detail/:recipeID'\n                    render={(routeProps) => (\n                      <RecipeDetail\n                        recipesList={recipesList}\n                        deleteRecipe={deleteRecipe}\n                        addIngredients={addIngredients}\n                        {...routeProps}\n                      />\n                    )}\n                  />\n                  <Route\n                    path='/recipes/update-recipe/:recipeID'\n                    render={(routeProps) => (\n                      <RecipeForm\n                        match={routeProps.match}\n                        history={routeProps.history}\n                        location={routeProps.location}\n                        recipesList={recipesList}\n                        updateRecipe={updateRecipe}\n                      />\n                    )}\n                  />\n                  <Route\n                    path='/recipes/create-new-recipes'\n                    render={(routeProps) => (\n                      <RecipeForm\n                        match={routeProps.match}\n                        history={routeProps.history}\n                        location={routeProps.location}\n                        createNewRecipe={createNewRecipe}\n                      />\n                    )}\n                  />\n                  <Route path='/recipes' component={SelectRecipe} />\n                </Switch>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default RecipeSection;\n","import React, { Component } from \"react\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport FieldLabel from \"./FieldLabel\";\n\nconst IngredientSchema = yup.object().shape({\n  name: yup.string().required(),\n  quantity: yup.number().required(),\n});\n\ninterface IngredientFormProps extends RouteComponentProps {\n  ingredientsList: Ingredient[];\n  updateIngredient?: (ingredient: Ingredient) => void;\n  deleteIngredient?: (ingredientID: string) => void;\n  addIngredients?: (ingredient: Ingredient) => void;\n  setSelectingIngredientID: (ingredienID: string) => void;\n}\n\nclass IngredientForm extends Component<IngredientFormProps> {\n  public initialValues: Ingredient;\n  private defaultInitialValues: any;\n\n  constructor(props: IngredientFormProps) {\n    super(props);\n    this.defaultInitialValues = {\n      name: \"\",\n      quantity: \"\",\n      id: \"\",\n    };\n    const {\n      ingredientsList,\n      updateIngredient,\n      deleteIngredient,\n      match,\n    } = this.props;\n\n    if (\n      (updateIngredient || deleteIngredient) &&\n      match.params &&\n      (match.params as any).ingredientID\n    ) {\n      const ingredientID = (match.params as any).ingredientID;\n      const ingredient = ingredientsList.find(\n        (ingredient: Ingredient) => ingredient.id === ingredientID\n      );\n\n      this.initialValues = ingredient || this.defaultInitialValues;\n    } else {\n      this.initialValues = this.defaultInitialValues;\n    }\n  }\n\n  componentWillReceiveProps = () => {\n    const { match, ingredientsList } = this.props;\n    const ingredientID = (match.params as any).ingredientID;\n    const ingredient = ingredientsList.find(\n      (ingredient: Ingredient) => ingredient.id === ingredientID\n    );\n\n    this.initialValues = ingredient || this.defaultInitialValues;\n  };\n\n  handleDeleteIngredient = () => {\n    const { deleteIngredient } = this.props;\n\n    deleteIngredient && deleteIngredient(this.initialValues.id);\n  };\n\n  handleSubmit = (values: Ingredient, actions: any) => {\n    const {\n      updateIngredient,\n      addIngredients,\n      setSelectingIngredientID,\n      history,\n    } = this.props;\n\n    updateIngredient && updateIngredient(values);\n    addIngredients && addIngredients(values);\n\n    history.push(\"/shopping-list\");\n    setSelectingIngredientID(\"\");\n    actions.resetForm();\n  };\n\n  render() {\n    const { addIngredients, setSelectingIngredientID, history } = this.props;\n\n    return (\n      <Formik\n        initialValues={this.initialValues}\n        onSubmit={this.handleSubmit}\n        validationSchema={IngredientSchema}\n        enableReinitialize\n      >\n        {({ handleSubmit, setFieldValue }) => (\n          <form onSubmit={handleSubmit}>\n            <div className='row'>\n              <div className='col-md-5'>\n                <div className='form-group'>\n                  <FieldLabel htmlFor='ingredientName'>Name</FieldLabel>\n                  <Field\n                    placeholder='Name'\n                    name='name'\n                    id='ingredientName'\n                    className='form-control'\n                  />\n                  <ErrorMessage name='name'>\n                    {(errMsg) => <span className='text-danger'>{errMsg}</span>}\n                  </ErrorMessage>\n                </div>\n              </div>\n              <div className='col-md-3'>\n                <div className='form-group'>\n                  <FieldLabel htmlFor='ingredientQuantity'>Amount</FieldLabel>\n                  <Field\n                    placeholder='Amount'\n                    name='quantity'\n                    id='ingredientQuantity'\n                    className='form-control'\n                  />\n                  <ErrorMessage name='quantity'>\n                    {(errMsg) => <span className='text-danger'>{errMsg}</span>}\n                  </ErrorMessage>\n                </div>\n              </div>\n            </div>\n            <div className='d-flex'>\n              {addIngredients ? (\n                <button type='submit' className='btn btn-success'>\n                  Add\n                </button>\n              ) : (\n                <span>\n                  <button type='submit' className='btn btn-success'>\n                    Update\n                  </button>\n                  <button\n                    className='btn btn-danger ml-3'\n                    type='button'\n                    onClick={() => {\n                      this.handleDeleteIngredient();\n                      setSelectingIngredientID(\"\");\n                      history.push(\"/shopping-list\");\n                    }}\n                  >\n                    Delete\n                  </button>\n                </span>\n              )}\n              <button\n                className='btn btn-primary ml-3'\n                type='button'\n                onClick={() => {\n                  setFieldValue(\"name\", \"\");\n                  setFieldValue(\"quantity\", \"\");\n                }}\n              >\n                Clear\n              </button>\n            </div>\n          </form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nexport default IngredientForm;\n","import React, { Component } from \"react\";\nimport IngredientForm from \"./IngredientForm\";\nimport IngredientList from \"./IngredientsList\";\nimport { Route, RouteComponentProps, Redirect } from \"react-router-dom\";\ninterface ShoppingListSectionProps extends RouteComponentProps {\n  ingredientsList: Ingredient[];\n  addIngredients: (...ingredients: Ingredient[]) => void;\n  updateIngredient: (ingredient: Ingredient) => void;\n  deleteIngredient: (ingredientID: string) => void;\n}\nexport default class ShoppingListSection extends Component<\n  ShoppingListSectionProps\n> {\n  state = {\n    selectingIngredientID: \"\",\n  };\n\n  setSelectingIngredientID = (ingredientID: string) => {\n    const { history } = this.props;\n\n    this.setState({ selectingIngredientID: ingredientID });\n    ingredientID &&\n      history.push(`/shopping-list/edit-ingredient/${ingredientID}`);\n  };\n\n  render() {\n    const {\n      ingredientsList,\n      addIngredients,\n      deleteIngredient,\n      updateIngredient,\n    } = this.props;\n    return (\n      <div className='container'>\n        <div className='p-4 border-bottom'>\n          <Route\n            path='/shopping-list/new-ingredient'\n            render={(routeProps) => (\n              <IngredientForm\n                ingredientsList={ingredientsList}\n                addIngredients={addIngredients}\n                setSelectingIngredientID={this.setSelectingIngredientID}\n                {...routeProps}\n              />\n            )}\n          />\n          <Route\n            path='/shopping-list/edit-ingredient/:ingredientID'\n            render={(routeProps) => (\n              <IngredientForm\n                ingredientsList={ingredientsList}\n                updateIngredient={updateIngredient}\n                deleteIngredient={deleteIngredient}\n                setSelectingIngredientID={this.setSelectingIngredientID}\n                {...routeProps}\n              />\n            )}\n          />\n          <Route\n            path='/shopping-list'\n            exact\n            render={() => <Redirect to='/shopping-list/new-ingredient' />}\n          />\n        </div>\n        <div className='pt-4'>\n          <IngredientList\n            ingredients={ingredientsList}\n            setSelectingIngredientID={this.setSelectingIngredientID}\n            selectingIngredientID={this.state.selectingIngredientID}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap\";\nimport \"./App.css\";\nimport seed from \"./seed.json\";\nimport * as uuid from \"uuid\";\n\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport AppHeader from \"./components/AppHeader\";\nimport RecipeSection from \"./components/RecipeSection\";\nimport ShoppingListSection from \"./components/ShoppingListSection\";\n\ninterface AppState {\n  recipesList: Recipe[];\n  selectingRecipeID: string;\n  ingredientsList: Ingredient[];\n}\n\nconst createUniqueList = (list: any[]) =>\n  list.map((item: any) => ({ ...item, id: uuid.v4() }));\nclass App extends Component<any, AppState> {\n  state = {\n    recipesList: seed.map((item) => ({\n      ...item,\n      id: uuid.v4(),\n      ingredients: createUniqueList(item.ingredients),\n    })),\n    selectingRecipeID: \"\",\n    ingredientsList: [] as Ingredient[],\n  };\n\n  setSelectingRecipeID = (recipeID: string) => {\n    this.setState({ selectingRecipeID: recipeID });\n  };\n\n  createNewRecipe = (recipe: Recipe) => {\n    const uniqueRecipe = {\n      ...recipe,\n      id: uuid.v4(),\n      ingredients: createUniqueList(recipe.ingredients),\n    };\n\n    this.setState({\n      recipesList: [...this.state.recipesList, uniqueRecipe],\n    });\n  };\n\n  updateRecipe = (newRecipe: Recipe) => {\n    const recipes = [...this.state.recipesList];\n    const updatedRecipeIndex = recipes.findIndex(\n      (item) => item.id === newRecipe.id\n    );\n\n    if (updatedRecipeIndex !== -1) {\n      recipes[updatedRecipeIndex] = newRecipe;\n    }\n\n    this.setState({\n      recipesList: recipes,\n    });\n  };\n\n  deleteRecipe = (recipeID: string) => {\n    this.setState({\n      recipesList: this.state.recipesList.filter(\n        (recipe: Recipe) => recipe.id !== recipeID\n      ),\n    });\n  };\n\n  addIngredients = (...ingredients: Ingredient[]) => {\n    this.setState({\n      ingredientsList: [\n        ...this.state.ingredientsList,\n        ...createUniqueList(ingredients),\n      ],\n    });\n  };\n\n  deleteIngredient = (ingredientID: string) => {\n    this.setState({\n      ingredientsList: this.state.ingredientsList.filter(\n        (ingredient: Ingredient) => ingredient.id !== ingredientID\n      ),\n    });\n  };\n\n  updateIngredient = (newIngredient: Ingredient) => {\n    const ingredients = [...this.state.ingredientsList];\n    const updatedIngredientIndex = ingredients.findIndex(\n      (item: Ingredient) => item.id === newIngredient.id\n    );\n\n    if (updatedIngredientIndex !== -1) {\n      ingredients[updatedIngredientIndex] = newIngredient;\n    }\n\n    this.setState({\n      ingredientsList: ingredients,\n    });\n  };\n\n  render() {\n    const { recipesList, selectingRecipeID, ingredientsList } = this.state;\n\n    return (\n      <div className='App'>\n        <Router>\n          <AppHeader />\n          <Route\n            path='/recipes'\n            render={(routeProps) => (\n              <RecipeSection\n                recipesList={recipesList}\n                createNewRecipe={this.createNewRecipe}\n                updateRecipe={this.updateRecipe}\n                deleteRecipe={this.deleteRecipe}\n                setSelectingRecipeID={this.setSelectingRecipeID}\n                selectingRecipeID={selectingRecipeID}\n                addIngredients={this.addIngredients}\n                {...routeProps}\n              />\n            )}\n          />\n          <Route\n            path='/shopping-list'\n            render={(routeProps) => (\n              <ShoppingListSection\n                ingredientsList={ingredientsList}\n                addIngredients={this.addIngredients}\n                updateIngredient={this.updateIngredient}\n                deleteIngredient={this.deleteIngredient}\n                {...routeProps}\n              />\n            )}\n          />\n          <Route path='/' exact render={() => <Redirect to='/recipes' />} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}